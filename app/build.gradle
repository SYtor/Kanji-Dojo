plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
}

ext {
    compose_version = '1.0.1'
}

android {

    compileSdkVersion 30

    defaultConfig {
        applicationId "ua.syt0r.kanji"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        release {
            signingConfig debug.signingConfig
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }

    flavorDimensions "version"

    productFlavors {

        clean {
            dimension "version"
        }

        googlePlay {
            dimension "version"
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }

}

dependencies {

    implementation project(':svg')
    implementation project(':kanji_db_model')

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'

    implementation 'com.google.android.material:material:1.4.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.activity:activity-compose:1.3.1"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha07"

    implementation "androidx.navigation:navigation-compose:2.4.0-alpha06"
    implementation "androidx.paging:paging-compose:1.0.0-alpha12"

    def lifecycle_version = "2.3.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // Room
    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Hilt
    implementation 'com.google.dagger:hilt-android:2.38.1'
    kapt 'com.google.dagger:hilt-compiler:2.38.1'
    kapt "androidx.hilt:hilt-compiler:1.0.0"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0-alpha03'

    // Google Play
    googlePlayImplementation platform('com.google.firebase:firebase-bom:28.0.1')
    googlePlayImplementation "com.google.firebase:firebase-analytics-ktx"

    // Test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'

}

buildscript {

    repositories {
        mavenCentral()
        google()
    }

    dependencies {
        classpath 'com.google.code.gson:gson:2.8.8'
    }

}

import com.google.gson.*

import javax.net.ssl.HttpsURLConnection
import javax.xml.parsers.DocumentBuilderFactory

class LintIssue {
    String id
    String message
    List<String> locations
}

// Map of severity to list of issues
private static Map<String, List<LintIssue>> parseLintReport(File file) {

    def severityMap = new HashMap<String, List<LintIssue>>()

    var xmlDocumentBuilder = DocumentBuilderFactory.newInstance()
            .newDocumentBuilder()

    var xmlDocument = xmlDocumentBuilder.parse(file)
    var nodeList = xmlDocument.getElementsByTagName("issue")

    for (int i = 0; i < nodeList.length; i++) {
        var issueXmlTag = nodeList.item(i)
        var attrs = issueXmlTag.getAttributes()
        var fileLocationXmlTags = issueXmlTag.childNodes

        var issue = new LintIssue()

        issue.id = attrs.getNamedItem("id").nodeName
        issue.message = attrs.getNamedItem("message").nodeName

        def issueLocations = new ArrayList(fileLocationXmlTags.length)
        issue.locations = issueLocations

        for (int locIndex = 0; locIndex < fileLocationXmlTags.length; locIndex++) {
            var locationAttributes = fileLocationXmlTags.item(locIndex)
                    .getAttributes()
            if (locationAttributes != null) {
                var filePath = locationAttributes.getNamedItem("file")
                issueLocations.add(filePath)
            }
        }

        var severity = attrs.getNamedItem("severity").textContent

        var issuesWithSameSeverity = severityMap.get(severity)
        if (issuesWithSameSeverity == null) {
            issuesWithSameSeverity = new ArrayList<LintIssue>()
            severityMap.put(severity, issuesWithSameSeverity)
        }

        issuesWithSameSeverity.add(issue)

    }

    return severityMap
}

private void publishLintTestResult(String message) {
    println("Trying to publish message: $message")
    String githubToken = project.getProperty("githubToken")
    String commitSha = System.getenv("GITHUB_SHA")

    def connection = (HttpsURLConnection) new URL("https://api.github.com/repos/SYtor/Kanji-Dojo/check-runs").openConnection()
    connection.setRequestMethod("POST")
    connection.setRequestProperty("Authorization", "Bearer $githubToken")
    connection.setRequestProperty("Accept", "application/vnd.github.v3+json")
    connection.setDoOutput(true)

    var requestDataJson = new JsonObject()
    requestDataJson.addProperty("name", "Lint Check")
    requestDataJson.addProperty("head_sha", commitSha)
    requestDataJson.addProperty("conclusion", "success")

    var outputJson = new JsonObject()
    outputJson.addProperty("title", "Title")
    outputJson.addProperty("summary", "Summary")
    outputJson.addProperty("text", message)
    requestDataJson.add("output", outputJson)

    var data = requestDataJson.toString()
    println("data = $data")
    connection.getOutputStream().write(data.getBytes("UTF-8"))

    def responseCode = connection.getResponseCode()
    println("Response code: $responseCode")

    var response = ""
    InputStream inputStream = responseCode < 400 ? connection.getInputStream() : connection.getErrorStream()
    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))
    while ((line = reader.readLine()) != null) {
        response += line
    }
    reader.close();
    println("Response body: $response")
}

tasks.register("prettyLint") {

    it.doLast {

        var files = new File(rootProject.projectDir, "app/build/reports").listFiles()
        println("${files.length} lint files found")

        StringBuilder markdownMessage = new StringBuilder()

        Arrays.stream(files)
                .filter { it.name.endsWith(".xml") }
                .forEach { reportFile ->
                    println("Trying to parse file ${reportFile.name}")

                    markdownMessage.append("# Report for ${reportFile.name}\n")
                    var lintChecks = parseLintReport(reportFile)

                    println("Parsing completed for file ${reportFile.name}")

                    lintChecks.each { severity, issues ->
                        println("severity = ${severity}")
                        markdownMessage.append("## Found ${issues.size()} issues with severity=$severity\n")
                    }

                    markdownMessage.append("\n")

                }

        try {
            publishLintTestResult(markdownMessage.toString())
        } catch (IOException e) {
            println("Exception during publish, message: ${e.message}")
        }
    }

