buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.google.code.gson:gson:2.8.8'
    }

}


import com.google.gson.JsonObject

import javax.net.ssl.HttpsURLConnection
import javax.xml.parsers.DocumentBuilderFactory

class LintIssue {
    String id
    String message
    List<String> locations
}

// Map of severity to list of issues
private static Map<String, List<LintIssue>> parseLintReport(File file) {

    def severityMap = new HashMap<String, List<LintIssue>>()

    var xmlDocumentBuilder = DocumentBuilderFactory.newInstance()
            .newDocumentBuilder()

    var xmlDocument = xmlDocumentBuilder.parse(file)
    var nodeList = xmlDocument.getElementsByTagName("issue")

    for (int i = 0; i < nodeList.length; i++) {
        var issueXmlTag = nodeList.item(i)
        var attrs = issueXmlTag.getAttributes()
        var fileLocationXmlTags = issueXmlTag.childNodes

        var issue = new LintIssue()

        issue.id = attrs.getNamedItem("id").nodeValue
        issue.message = attrs.getNamedItem("message").nodeValue

        def issueLocations = new ArrayList(fileLocationXmlTags.length)
        issue.locations = issueLocations

        for (int locIndex = 0; locIndex < fileLocationXmlTags.length; locIndex++) {
            var locationAttributes = fileLocationXmlTags.item(locIndex)
                    .getAttributes()
            if (locationAttributes != null) {
                var filePath = locationAttributes.getNamedItem("file")
                issueLocations.add(filePath)
            }
        }

        var severity = attrs.getNamedItem("severity").textContent

        var issuesWithSameSeverity = severityMap.get(severity)
        if (issuesWithSameSeverity == null) {
            issuesWithSameSeverity = new ArrayList<LintIssue>()
            severityMap.put(severity, issuesWithSameSeverity)
        }

        issuesWithSameSeverity.add(issue)

    }

    return severityMap
}

private void publishLintTestResult(String message) {
    println("Trying to publish message: $message")
    String githubToken = project.getProperty("githubToken")
    String commitSha = System.getenv("GITHUB_SHA")

    def connection = (HttpsURLConnection) new URL("https://api.github.com/repos/SYtor/Kanji-Dojo/check-runs").openConnection()
    connection.setRequestMethod("POST")
    connection.setRequestProperty("Authorization", "Bearer $githubToken")
    connection.setRequestProperty("Accept", "application/vnd.github.v3+json")
    connection.setDoOutput(true)

    var requestDataJson = new JsonObject()
    requestDataJson.addProperty("name", "Lint Check Summary")
    requestDataJson.addProperty("head_sha", commitSha)
    requestDataJson.addProperty("conclusion", "success")

    var outputJson = new JsonObject()
    outputJson.addProperty("title", "Lint Check Summary")
    outputJson.addProperty("summary", message)
    // outputJson.addProperty("text", )
    requestDataJson.add("output", outputJson)

    var data = requestDataJson.toString()
    println("data = $data")
    connection.getOutputStream().write(data.getBytes("UTF-8"))

    def responseCode = connection.getResponseCode()
    println("Response code: $responseCode")

    var response = ""
    var line = ""
    InputStream inputStream = responseCode < 400 ? connection.getInputStream() : connection.getErrorStream()
    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))
    while ((line = reader.readLine()) != null) {
        response += line
    }
    reader.close();
    println("Response body: $response")
}

tasks.register("githubPostLintCheck") {

    it.doLast {

        StringBuilder markdownMessage = new StringBuilder()

        var reports = new File(rootProject.projectDir, "app/build/reports").listFiles()

        File[] xmlReports = null

        if (reports != null) {
            xmlReports = Arrays.stream(reports)
                    .filter { it.name.endsWith(".xml") }
                    .toArray()
        }

        if (xmlReports == null || xmlReports.length == 0) {
            markdownMessage.append("### No lint reports found")
        } else {

            for (File reportFile : xmlReports) {

                println("Trying to parse file ${reportFile.name}")
                var lintChecks = parseLintReport(reportFile)
                println("Parsing completed for file ${reportFile.name}")

                markdownMessage.append("### Report for ${reportFile.name}\n")

                lintChecks.each { severity, issues ->
                    markdownMessage.append("<details>\n")
                    markdownMessage.append("<summary>`$severity` issues: ${issues.size()} items found</summary>\n\n")
                    markdownMessage.append("Issue type | Location\n--- | ---\n")
                    issues.forEach { lintIssue ->
                        markdownMessage.append("${lintIssue.id} | ${lintIssue.locations.toString()}\n")
                    }
                    markdownMessage.append("</details>\n\n")
                }

                markdownMessage.append("\n")
            }

        }

        try {
            publishLintTestResult(markdownMessage.toString())
        } catch (IOException e) {
            println("Exception during publish, message: ${e.message}")
        }
    }

}