PRAGMA user_version = 9;

getLastInsertRowId:
SELECT last_insert_rowid();

------- LETTER DECKS -------

CREATE TABLE IF NOT EXISTS letter_deck (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL,
    position INTEGER NOT NULL DEFAULT 0 -- bigger values are at the top of the list
);

CREATE TABLE IF NOT EXISTS letter_deck_entry (
    character TEXT NOT NULL,
    deck_id INTEGER NOT NULL,
    PRIMARY KEY(character, deck_id),
    FOREIGN KEY(deck_id) REFERENCES letter_deck(id) ON UPDATE NO ACTION ON DELETE CASCADE
);

insertLetterDeck:
INSERT INTO letter_deck(name, position)
SELECT ?, IFNULL(MAX(position) + 1, 0) FROM letter_deck;

deleteLetterDeck {
    DELETE FROM letter_deck WHERE id=:id;
    DELETE FROM letter_deck_entry WHERE deck_id=:id;
}

deleteLetterDecks {
    DELETE FROM letter_deck WHERE id IN :deckIds;
    DELETE FROM letter_deck_entry WHERE deck_id IN :deckIds;
}

updateLetterDeckTitle:
UPDATE letter_deck SET name=? WHERE id=?;

updateLetterDeckPosition:
UPDATE letter_deck SET position=? WHERE id=?;

getAllLetterDecks:
SELECT * FROM letter_deck;

getLetterDeck:
SELECT * FROM letter_deck WHERE id=?;

insertOrIgnoreLetterDeckEntry:
INSERT OR IGNORE INTO letter_deck_entry (character,deck_id) VALUES (?,?);

deleteLetterDeckEntry:
DELETE FROM letter_deck_entry WHERE deck_id=? AND character=?;

migrateLetterDeckEntries:
UPDATE OR REPLACE letter_deck_entry
SET deck_id = :deckId
WHERE deck_id IN :deckIdToMigrate;

getEntriesForLetterDeck:
SELECT * FROM letter_deck_entry WHERE deck_id=?;

------- VOCAB DECKS -------

CREATE TABLE IF NOT EXISTS vocab_deck (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    title TEXT NOT NULL,
    position INTEGER NOT NULL DEFAULT 0 -- bigger values are at the top of the list
);

CREATE TABLE IF NOT EXISTS vocab_deck_entry (
    word_id INTEGER NOT NULL,
    deck_id INTEGER NOT NULL,
    PRIMARY KEY(word_id, deck_id),
    FOREIGN KEY(deck_id) REFERENCES vocab_deck(id) ON UPDATE NO ACTION ON DELETE CASCADE
);

insertVocabDeck:
INSERT INTO vocab_deck(title, position)
SELECT :title, IFNULL(MAX(position) + 1, 0) FROM vocab_deck;

updateVocabDeckTitle:
UPDATE vocab_deck SET title = ? WHERE id = ?;

deleteVocabDeck:
DELETE FROM vocab_deck WHERE id = ?;

updateVocabDeckPosition:
UPDATE vocab_deck SET position=? WHERE id=?;

insertVocabDeckEntry:
INSERT OR IGNORE INTO vocab_deck_entry(word_id, deck_id) VALUES (?, ?);

deleteVocabDeckEntry:
DELETE FROM vocab_deck_entry WHERE word_id = ? AND deck_id = ?;

migrateVocabDeckEntries:
UPDATE OR REPLACE vocab_deck_entry
SET deck_id = :deckId
WHERE deck_id IN :deckIdToMigrate;

getVocabDecks:
SELECT * FROM vocab_deck;

getVocabDeckEntries:
SELECT * FROM vocab_deck_entry WHERE deck_id = :deckId;

------- FSRS -------

CREATE TABLE IF NOT EXISTS fsrs_card (
    key TEXT NOT NULL,
    practice_type INTEGER NOT NULL,
    status INTEGER NOT NULL,
    stability REAL NOT NULL,
    difficulty REAL NOT NULL,
    lapses INTEGER NOT NULL,
    repeats INTEGER NOT NULL,
    last_review INTEGER NOT NULL,
    interval INTEGER NOT NULL,
    PRIMARY KEY(key, practice_type)
);

upsertFsrsCard:
INSERT OR REPLACE INTO fsrs_card
VALUES ?;

getFsrsCards:
SELECT * FROM fsrs_card;

------- REVIEW HISTORY -------

CREATE TABLE IF NOT EXISTS review_history(
    key TEXT NOT NULL,
    practice_type INTEGER NOT NULL,
    timestamp INTEGER NOT NULL,
    duration INTEGER NOT NULL,
    grade INTEGER NOT NULL,
    mistakes INTEGER NOT NULL,
    deck_id INTEGER NOT NULL,
    PRIMARY KEY(key, practice_type, timestamp)
);

upsertReview:
INSERT OR REPLACE INTO review_history(key, practice_type, timestamp, duration, grade, mistakes, deck_id)
VALUES (?,?,?,?,?,?,?);

getReviewHistory:
SELECT key, practice_type, timestamp, duration, grade, mistakes, deck_id
FROM review_history
WHERE timestamp > :start AND timestamp < :end;

migrateDeckForReviewHistory:
UPDATE OR REPLACE review_history
SET deck_id = :deckId
WHERE deck_id IN :deckIdToMigrate AND practice_type IN :practiceTypes;

getFirstReview:
SELECT key, practice_type, timestamp, duration, grade, mistakes, deck_id
FROM review_history
WHERE key = :itemKey AND practice_type = :practiceType
ORDER BY timestamp
LIMIT 1;

getLastReview:
SELECT key, practice_type, timestamp, duration, grade, mistakes, deck_id
FROM review_history
WHERE key = :itemKey AND practice_type = :practiceType
ORDER BY timestamp DESC
LIMIT 1;

getLastDeckReview:
SELECT MAX(timestamp)
FROM review_history
WHERE deck_id = :deckId AND practice_type IN :practiceTypes
LIMIT 1;

getTotalReviewsCount:
SELECT COUNT(*)
FROM review_history;

getUniqueReviewItemsCountForPracticeTypes:
SELECT COUNT(DISTINCT key)
FROM review_history
WHERE practice_type IN :practiceTypes;

getTotalReviewsDuration:
SELECT SUM(CASE WHEN duration > :reviewDurationLimit THEN :reviewDurationLimit ELSE duration END)
FROM review_history;

getReviewStreaks:
WITH DateList AS (
    SELECT DISTINCT date(round(timestamp / 1000), 'unixepoch', 'localtime') AS date
    FROM review_history
),
DateWithLag AS (
    SELECT
    date,
    JULIANDAY(date) - (
        SELECT COUNT(*)
        FROM DateList AS inner_dates
        WHERE inner_dates.date <= outer_dates.date
    ) AS day_group
    FROM DateList AS outer_dates
),
ContinuousGroups AS (
    SELECT MIN(date) AS start_date, MAX(date) AS end_date, COUNT(*) AS sequence_length
    FROM DateWithLag
    GROUP BY day_group
)
SELECT *
FROM ContinuousGroups
ORDER BY end_date DESC;