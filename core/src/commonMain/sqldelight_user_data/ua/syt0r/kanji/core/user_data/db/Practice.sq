CREATE TABLE IF NOT EXISTS practice (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS practice_entry (
    character TEXT NOT NULL,
    practice_id INTEGER NOT NULL,
    PRIMARY KEY(character, practice_id),
    FOREIGN KEY(practice_id) REFERENCES practice(id) ON UPDATE NO ACTION ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS character_progress (
    character TEXT NOT NULL,
    mode INTEGER NOT NULL, -- 0 - writing, 1 - reading
    last_review_time INTEGER,
    repeats INTEGER NOT NULL DEFAULT 0, -- successful review strike
    lapses INTEGER NOT NULL DEFAULT 0, -- times repeats were reseted due to mistake during practice
    PRIMARY KEY(character, mode)
);

CREATE TABLE IF NOT EXISTS writing_review (
    character TEXT NOT NULL,
    practice_id INTEGER NOT NULL,
    timestamp INTEGER NOT NULL,
    mistakes INTEGER NOT NULL,
    is_study INTEGER NOT NULL, -- 1 - study, 0 - review
    outcome INTEGER NOT NULL, -- 1 - success, 0 - fail
    duration INTEGER NOT NULL,
    PRIMARY KEY(character, practice_id, timestamp, mistakes),
    FOREIGN KEY(practice_id) REFERENCES practice(id) ON UPDATE NO ACTION ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS reading_review (
    character TEXT NOT NULL,
    practice_id INTEGER NOT NULL,
    timestamp INTEGER NOT NULL,
    mistakes INTEGER NOT NULL,
    outcome INTEGER NOT NULL, -- 1 - success, 0 - fail
    duration INTEGER NOT NULL,
    PRIMARY KEY(character, practice_id, timestamp, mistakes),
    FOREIGN KEY(practice_id) REFERENCES practice(id) ON UPDATE NO ACTION ON DELETE CASCADE
);

PRAGMA user_version = 5;

getLastInsertRowId:
SELECT last_insert_rowid();

insertPractice:
INSERT INTO practice (name) VALUES (?);

deletePractice:
DELETE FROM practice WHERE id=?;

updatePracticeTitle:
UPDATE practice SET name=? WHERE id=?;

getAllPractices:
SELECT * FROM practice;

getPractice:
SELECT * FROM practice WHERE id=?;

insertOrIgnorePracticeEntry:
INSERT OR IGNORE INTO practice_entry (character,practice_id) VALUES (?,?);

deletePracticeEntry:
DELETE FROM practice_entry WHERE practice_id=? AND character=?;

getPracticeEntriesForPractice:
SELECT * FROM practice_entry WHERE practice_id=?;

getCharacterProgress:
SELECT * FROM character_progress WHERE character=? AND mode=?;

upsertCharacterProgress:
INSERT OR REPLACE INTO character_progress(character, mode, last_review_time, repeats, lapses)
VALUES (?,?,?,?,?);

getCharacterProgresses:
SELECT *
FROM character_progress;

upsertWritingReview:
INSERT OR REPLACE INTO writing_review(character, practice_id, timestamp, mistakes, is_study, outcome, duration)
VALUES (?,?,?,?,?,?,?);

upsertReadingReview:
INSERT OR REPLACE INTO reading_review(character, practice_id, timestamp, mistakes, outcome, duration)
VALUES (?, ?, ?, ?, ?, ?);

getWritingReviews:
SELECT character, practice_id, timestamp, mistakes, is_study, outcome, duration
FROM writing_review
WHERE timestamp > :start AND timestamp < :end;

getReadingReviews:
SELECT character, practice_id, timestamp, mistakes, outcome, duration
FROM reading_review
WHERE timestamp > :start AND timestamp < :end;

getCharacterProgressReviewedInRange:
SELECT *
FROM  character_progress
WHERE last_review_time > :startTime AND last_review_time < :endTime;

getFirstWritingReview:
SELECT character, practice_id, timestamp, mistakes, is_study, outcome, duration
FROM writing_review
WHERE character = :character
ORDER BY timestamp
LIMIT 1;

getFirstReadingReview:
SELECT character, practice_id, timestamp, mistakes, outcome, duration
FROM reading_review
WHERE character = :character
ORDER BY timestamp
LIMIT 1;

getLastWritingReview:
SELECT character, practice_id, timestamp, mistakes, is_study, outcome, duration
FROM writing_review
WHERE practice_id = :practiceId
ORDER BY timestamp DESC
LIMIT 1;

getLastReadingReview:
SELECT character, practice_id, timestamp, mistakes, outcome, duration
FROM reading_review
WHERE practice_id = :practiceId
ORDER BY timestamp DESC
LIMIT 1;

getTotalWritingReviewsCount:
SELECT COUNT(*)
FROM writing_review;

getTotalWritingReviewsDuration:
SELECT SUM(duration)
FROM writing_review;

getTotalReadingReviewsCount:
SELECT COUNT(*)
FROM reading_review;

getTotalReadingReviewsDuration:
SELECT SUM(duration)
FROM reading_review;
